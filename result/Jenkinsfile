pipeline {
    agent any

    environment {
        APP_NAME = 'result'
        PIPELINE_NAME = "${APP_NAME}"
        TARGET_CHANGESET = "**/${APP_NAME}/**"
        TARGET_PATH = "${APP_NAME}"
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USER = 'mrscrb'
        DOCKER_REPO = "${APP_NAME}"
        DOCKER_IMAGE = "${DOCKER_USER}/${DOCKER_REPO}:v${env.BUILD_ID}"
        SLACK_CHANNEL = '#lfs261'
        AGENT_IMAGE = 'node:8.16.0-alpine'
    }

    stages {
        stage('result-build') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                echo 'Compiling result app..'
                dir(path: "${TARGET_PATH}") {
                    sh 'npm install'
                }
            }
        }
        stage('result-test') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                echo 'Running Unit Tests on result app..'
                dir(path: "${TARGET_PATH}") {
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
        stage('result-docker-package') {
            agent any
            when {
                changeset "${TARGET_CHANGESET}"
                branch "${GIT_BRANCH_MAIN}"
            }
            steps {
                echo 'Packaging result app with docker'
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-rw') {
                        def resultImage = docker.build("${DOCKER_IMAGE}", "${APP_NAME}")
                        resultImage.push()
                        resultImage.push("${env.BRANCH_NAME}")
                        resultImage.push('latest')
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(channel: "${SLACK_CHANNEL}", message: "Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(channel: "${SLACK_CHANNEL}", message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
    }
}
