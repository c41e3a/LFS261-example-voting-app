pipeline {
    agent any

    environment {
        PIPELINE_NAME = 'result'
        DOCKER_REGISTRY = 'https://registry.hub.docker.com'
        DOCKER_USER = 'mrscrb'
        DOCKER_REPO = PIPELINE_NAME
        DOCKER_IMAGE = "${DOCKER_USER}/${DOCKER_REPO}:v${env.BUILD_ID}"
        TARGET_CHANGESET = '**/result/**'
        TARGET_PATH = "./${PIPELINE_NAME}"
        SLACK_CHANNEL = '#lfs261'
    }

    stages {
        // build the docker image
        stage('build') {
            when {
                changeset "${TARGET_CHANGESET}"
            }
            agent any
            steps {
                echo 'Building result app'
                script {
                    docker.build("${DOCKER_IMAGE}", "${TARGET_PATH}")
                }
            }
        }
        stage('test') {
            when {
                changeset "${TARGET_CHANGESET}"
            }
            agent {
                docker {
                    image "${DOCKER_IMAGE}" // use the image built in the previous stage
                    args 'sh'
                }
            }
            steps {
                echo 'Running Unit Tests on result app'
                dir('result') {
                    sh 'npm test'
                }
            }
        }
        stage('publish') {
            when {
                changeset "${TARGET_CHANGESET}"
                branch 'master'
            }
            agent any
            steps {
                echo 'Publishing result app'
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub') {
                        dockerImage = docker.build("${DOCKER_IMAGE}", "${TARGET_PATH}")
                        dockerImage.push("${DOCKER_USER}/${DOCKER_REPO}:v${env.BUILD_ID}")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend(channel: "${SLACK_CHANNEL}", message: "Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(channel: "${SLACK_CHANNEL}", message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
    }
}
