pipeline {

    agent none

    environment{
        APP_NAME = 'vote'
        GIT_BRANCH_MAIN = 'master'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USER = 'mrscrb'
        PIPELINE_NAME = "${APP_NAME}"
        TARGET_CHANGESET = "**/${APP_NAME}/**"
        TARGET_PATH = "${APP_NAME}"
        DOCKER_REPO = "${APP_NAME}"
        DOCKER_IMAGE = "${DOCKER_USER}/${DOCKER_REPO}:v${env.BUILD_ID}"
        AGENT_IMAGE = 'python:2.7.16-slim'
        SLACK_CHANNEL = '#lfs261'
    }

    stages {
        stage('vote-build') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                    args '--user root'
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                echo 'Compiling vote app..'
                dir(path: "${TARGET_PATH}") {
                    sh 'pip install -r requirements.txt'
                }
            }
        }
        stage('vote-test') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                    args '--user root'
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                echo 'Running Unit Tests on vote app..'
                dir(path: "${TARGET_PATH}") {
                    sh 'pip install -r requirements.txt'
                    sh 'nosetests -v'
                }
            }
        }
        stage('vote-docker-package') {
            agent any
            when {
                changeset "${TARGET_CHANGESET}"
                branch "${GIT_BRANCH_MAIN}"
            }
            steps {
                echo "Packaging ${APP_NAME} app with docker"
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-rw') {
                        def voteImage = docker.build("${DOCKER_IMAGE}", "${APP_NAME}")
                        voteImage.push()
                        voteImage.push("${env.BRANCH_NAME}")
                        voteImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Building multibranch pipeline for vote is completed.'
        }
    }
}
