pipeline {

    agent none

    environment {
        APP_NAME = 'worker'
        GIT_BRANCH_MAIN = 'master'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_USER = 'mrscrb'
        PIPELINE_NAME = "${APP_NAME}"
        TARGET_CHANGESET = "**/${APP_NAME}/**"
        TARGET_PATH = "${APP_NAME}"
        DOCKER_REPO = "${APP_NAME}"
        DOCKER_IMAGE = "${DOCKER_USER}/${DOCKER_REPO}:v${env.BUILD_ID}"
        AGENT_IMAGE = 'maven:3.8.5-jdk-11-slim'
        SLACK_CHANNEL = '#lfs261'
    }

    stages {
        stage('worker-build') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                // compile the worker app
                echo "Compiling ${APP_NAME} app.."
                dir(path: "${TARGET_PATH}") {
                    sh 'mvn compile'
                }
            }
        }

        stage('worker test') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                // run unit tests on worker app
                echo "Running Unit Tets on ${APP_NAME} app."
                dir(path: "${APP_NAME}") {
                    sh 'mvn clean test'
                }
            }
        }

        stage('worker-package') {
            agent {
                docker {
                    image "${AGENT_IMAGE}"
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            when {
                branch "${GIT_BRANCH_MAIN}" // only package on master branch
                changeset "${TARGET_CHANGESET}"
            }
            steps {
                echo "Packaging ${APP_NAME} app"
                dir(path: "${APP_NAME}") {
                    sh 'mvn package -DskipTests'
                    archiveArtifacts(artifacts: '**/target/*.jar', fingerprint: true)
                }
            }
        }

        stage('worker-docker-package') {
            agent any
            when {
                changeset "${TARGET_CHANGESET}"
                branch "${GIT_BRANCH_MAIN}"
            }
            steps {
                echo "Packaging ${APP_NAME} app with docker"
                script {
                    docker.withRegistry("${DOCKER_REGISTRY}", 'dockerhub-rw') {
                        def workerImage = docker.build("${DOCKER_IMAGE}", "./${APP_NAME}")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                        workerImage.push('latest')
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Building multibranch pipeline for worker is completed.'
        }
    }
}
